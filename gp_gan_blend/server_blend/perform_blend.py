# -*- coding: utf-8 -*-
"""blend.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lN7UQOFBMxDQlcu-k7EVoA8Zfkr-nDMG
"""
#############
'''
Image GCS URL as 4 arguments - download first
Send 4 arguments (src, dot, mask, result) to blend
Blend calls to gp_gan_runner with 5 arguments, 
    - Cropper processes 3 arguments
    - Result has been generated
    - Call GCS functions to create URL
    - Delete intermediate images
    - Return URL
Main calls blend, takes returned GCS URL
'''

#     !python run_gp_gan.py 
#       --src_image "/content/drive/My Drive/Final Project CS 329S/Blending GAN/Blending Sandbox Output/images/test_images/src.jpg" 
#       --dst_image "/content/drive/My Drive/Final Project CS 329S/Blending GAN/Blending Sandbox Output/images/test_images/dst.jpg" 
#       --mask_image "/content/drive/My Drive/Final Project CS 329S/Blending GAN/Blending Sandbox Output/images/test_images/mask_display.png" 
#       --blended_image "/content/drive/My Drive/Final Project CS 329S/Blending GAN/Blending Sandbox Output/images/test_images/result_display.png" 
#       --supervised False

import logging
import os
from gp_gan_runner import runner
from cropper import cropper
from google.cloud import storage
import datetime
import requests


class Merger:
    
    # def list_buckets():
    #     """Lists all buckets."""

    #     storage_client = storage.Client()
    #     buckets = storage_client.list_buckets()

    #     for bucket in buckets:
    #         print(bucket.name)
    
    
    
    def upload_blob(self,bucket_name, source_file_name, destination_blob_name):
        """Uploads a file to the bucket."""
        # The ID of your GCS bucket
        # bucket_name = "your-bucket-name"
        # The path to your file to upload
        # source_file_name = "local/path/to/file"
        # The ID of your GCS object
        # destination_blob_name = "storage-object-name"

        storage_client = storage.Client()
        bucket = storage_client.bucket(bucket_name)
        blob = bucket.blob(destination_blob_name)

        blob.upload_from_filename(source_file_name)

        print(
            "File {} uploaded to {}.".format(
                source_file_name, destination_blob_name
            )
        )

    

    def get_first_blob(self, bucket_name, prefix, delimiter = None):
        bucket_name = "imagesearch-cs329s"
        storage_client = storage.Client()
        blobs = storage_client.list_blobs(bucket_name, prefix = prefix)
        if blobs:
            for idx,val in enumerate(blobs):
                if idx ==1:
                    filename = os.path.join('tocrop',str(val.name).split('/')[1])
                    val.download_to_filename(filename)
                    return filename

    def get_res_blob(self, src1_prefix, src2_prefix, blend_blob_name):
        src1_img_name = self.get_first_blob("imagesearch-cs329s", src1_prefix)
        src2_img_name = self.get_first_blob("imagesearch-cs329s", src2_prefix)
        src1_img_name=src1_img_name.split('/')[1]
        src2_img_name=src2_img_name.split('/')[1]

        #os.replace('mask_display.png', os.path.join(os.getcwd(),'tocrop', 'mask.png'))
        mask = os.path.join(os.getcwd(),'tocrop', 'mask_display.png')
        
        cropper()
        sourceIMG = os.path.join(os.getcwd(), 'cropped', 'crop_'+ src1_img_name )
        destinIMG = os.path.join(os.getcwd(), 'cropped', 'crop_' + src2_img_name)
        maskIMG = os.path.join(os.getcwd(), 'cropped', 'crop_mask_display.png')
        logging.info("sourceIMG after cropping is ")
        logging.info(sourceIMG)
        runner(sourceIMG, destinIMG, maskIMG, blend_blob_name +'.jpg', False)
        blend_id_name = blend_blob_name + '.jpg'
        gan_result = os.path.join(os.getcwd(), blend_id_name)

        self.upload_blob("imagesearch-cs329s", gan_result , "blended_gan_result.jpg")

        #return generate_download_signed_url_v4("imagesearch-cs329s","gan_result.jpg")
        return "blended_gan_result.jpg"








